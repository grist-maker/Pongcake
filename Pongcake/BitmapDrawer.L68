003BE0F0 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/6/2022 10:43:43 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 32-Bit Bitmap Printer
00000000                             3  * Written by : Gabrielle Tristani
00000000                             4  * Date        09/23/2022:
00000000                             5  * Description: This project reads in a 32 bit  non-paletted bitmap, and prints it onscreen according to user entered constraints.
00000000                             6  * Bitmaps store the data making up an image, including a data header, other components, and a pixel array that defines
00000000                             7  * the color of each pixel. Pixel data is stored in little-endian byte storage format, while EASy68K stores bytes in big-endian.
00000000                             8  * This program provides a conversion that the bitmap can be displayed properly using pixel output in the EASy68K system.
00000000                             9  * The program goes through the header to get relevant data to print each pixel onscreen, then grabs the pixel array address.
00000000                            10  * In the beginning, it retrieves input that is loaded into the stack, with other variables stored in data registers for ease of access.
00000000                            11  * The arguments specify coordinates that should be considered the top left point of the printed chunk, width of the chunk, its height,
00000000                            12  * and coordinates that will be considered the top left point on the output window. There is extensive error checking done to ensure
00000000                            13  * that the full specified chunk will display in the output window and is a legal part of the bitmap itself.
00000000                            14  
00000000                            15  * A0 holds the bitmap address, A1 holds necessary input for trap commands
00000000                            16  *d1 and d0 are used in trap commands
00000000                            17  *d2 holds current y on output window, d3 holds current x on output window, d4 holds current row number / y value
00000000                            18  *d5 holds current column number / x value, d6 holds ending x value, d7 holds beginning y value to initialize the bitmap
00000000                            19  *-----------------------------------------------------------
00000000                            20      
00000000                            21          ;Change output window to match desired dimensions
00000000  7200                      22          move.l #0,d1
00000002  7000                      23          move.l #0,d0
00000004                            24          
00000004  223C 000002BC             25          move.l #700, d1
0000000A  E189                      26          lsl.l #8, d1
0000000C  E189                      27          lsl.l #8, d1 
0000000E  0681 000002BC             28          add.l #700, d1
00000014  7021                      29          move.l #33, d0
00000016  4E4F                      30          trap #15
00000018                            31          
Line 32 ERROR: Undefined symbol
00000018  41F9 004DBD16             32          lea bitmap,a0
0000001E  2008                      33          move.l a0, d0 ;Creates placeholder for pixel array address in d0
00000020  0658 0000                 34          add.w #0, (a0)+ ;skips through header to parse information
00000024  0698 00000000             35          add.l #0, (a0)+
0000002A  0698 00000000             36          add.l #0, (a0)+
00000030  D010                      37          add.b (a0),d0   ;saves pointer to pixel data to d0
00000032                            38          
00000032  2040                      39          move.l d0,a0
00000034                            40          
00000034                            41          ;Now, we can load in the bitmap and establish relevant stack variables
Line 42 ERROR: Undefined symbol
00000034  41F9 004DBD16             42          lea startMap,a0    ;load the address of the bitmap into a0
0000003A  2F3C 00000000             43          move.l #0, -(sp) ;Add top left x value. (00FFFFFC)
00000040  2F3C 00000000             44          move.l #0,-(sp) ;Add top left y value. (00FFFFF8)
00000046  2F3C 000002BC             45          move.l #700, -(sp) ;Add width of chunk.(00FFFFF4)        
0000004C  2F3C 000002BC             46          move.l #700, -(sp) ;Add height of chunk. (00FFFFF0)
00000052  2F3C 00000000             47          move.l #0, -(sp) ;Add top left x value on output screen. (00FFFFEC)
00000058  2F3C 00000000             48          move.l #0, -(sp) ;Add top left y value on output screen.(00FFFFE8)
0000005E                            49          
0000005E  2F3C 00000000             50          move.l #0, -(sp) ;Add dummy stack variable (00FFFFE4)
00000064  2F3C 000002BC             51          move.l #700,-(sp) ;Create new index in stack to store total width of bitmap. (00FFFFE0)
0000006A  2F3C 000002BC             52          move.l #700,-(sp) ;Create new index in stack to store total height of bitmap. (00FFFFDC)
00000070                            53  
00000070                            54  CreatePixelArrayValues:  
00000070  2008                      55          move.l a0, d0 ;Creates placeholder for pixel array address in d0
00000072  0658 0000                 56          add.w #0, (a0)+ ;skips through header to parse information
00000076  0698 00000000             57          add.l #0, (a0)+
0000007C  0698 00000000             58          add.l #0, (a0)+
00000082  D010                      59          add.b (a0),d0   ;saves pointer to pixel data to d0
00000084                            60          
00000084  2040                      61          move.l d0,a0
00000086                            62          
00000086  243C 000002BB             63          move.l #699,d2 ;Starting y value
0000008C  7600                      64          move.l #0,d3
0000008E  283C 000002BB             65          move.l #699,d4
00000094  7A01                      66          move.l #1,d5
00000096  2C3C 000002BC             67          move.l #700,d6
0000009C  2E3C 000002BB             68          move.l #699,d7
000000A2                            69          
000000A2  4EB9 000000D4             70          jsr EndianSwap
Line 71 ERROR: Invalid syntax
000000A8                            71          lea #00FFFFFC,sp
000000A8  4E75                      72          rts
000000AA                            73          ;jsr Exit
000000AA                            74          
000000AA                            75  InitialY:
000000AA  069F 00000000             76      add.l #0,(sp)+
000000B0  069F 00000000             77      add.l #0,(sp)+
000000B6                            78      
000000B6  2017                      79      move.l (sp),d0 ;Loads number of pixels per row into d0, multiplies by 4 to get bytes per row
000000B8  C0FC 0004                 80      mulu.w #4,d0
000000BC                            81      
000000BC  2204                      82      move.l d4,d1 ;Moves d4 to d1 to have d1 carry difference between initial y value and current y value, how many rows must be traversed
000000BE  9287                      83      sub.l d7,d1
000000C0                            84      
000000C0  C0C1                      85      mulu.w d1,d0 ;Multiplies number of rows by bytes per row
000000C2                            86      
000000C2  D1C0                      87      add.l d0,a0 ;Increments a0 to get to right position
000000C4                            88      
000000C4  2807                      89      move.l d7,d4 ;Initializes d4 properly
000000C6                            90      
000000C6  BE84                      91      cmp.l d4,d7
000000C8                            92      
000000C8  06A7 00000000             93      add.l #0,-(sp)
000000CE  06A7 00000000             94      add.l #0,-(sp)
000000D4                            95      
000000D4                            96  EndianSwap:
000000D4  BE84                      97      cmp.l d4,d7 ;Checks if starting y has been reached yet, branching to InitialY to initialize if not
000000D6  6DD2                      98      blt InitialY
000000D8                            99      
000000D8  2E7C 00FFFFFC            100      move.l #$00FFFFFC,sp
000000DE                           101      
000000DE  BA97                     102      cmp.l (sp),d5 ;Checks if current x value is at least one greater than leftmost x value, otherwise branching to ChangeXPlus
000000E0  6F00 0050                103      ble ChangeXPlus
000000E4                           104      
000000E4  BC85                     105      cmp.l d5,d6 ;Check to make sure current x value does not exceed rightmost x value, else branching to ChangeXMinus
000000E6  6D00 0068                106      blt ChangeXMinus
000000EA                           107      
000000EA  2E7C 00FFFFD8            108      move.l #$00FFFFD8,sp
000000F0                           109      
000000F0                           110      ;Grabs and operates on pixel color value
000000F0  2210                     111      move.l (a0),d1
000000F2  123C 0000                112      move.b #00, d1 ;Zeroes out the junk data to be in correct format
000000F6                           113      
000000F6  E159                     114      rol.w #8, d1 ;Leaves RRGG00BB
000000F8  E199                     115      rol.l #8, d1 ;leaves GG00BBRR
000000FA  4841                     116      swap.w d1 ;leaves BBRRGG00
000000FC  E199                     117      rol.l #8, d1 ;leaves RRGG00BB
000000FE  E159                     118      rol.w #8, d1 ;leaves RRGGBB00
00000100  E099                     119      ror.l #8, d1 ;leaves us with 00RRGGBB, meaning pen color is set for pixel color
00000102                           120      
00000102  103C 0050                121      move.b #80, d0
00000106  4E4F                     122      TRAP #15 ;Sets pen color
00000108                           123      
00000108  3203                     124      move.w d3, d1 ;Sets coordinate in x for pixel, with y pixel coordinate already in d2
0000010A  103C 0052                125      move.b #82, d0 ;Draws pixel
0000010E  4E4F                     126      TRAP #15
00000110                           127      
00000110  5283                     128      add.l #1, d3 ;Increments the x counter for output window
00000112  5285                     129      add.l #1, d5 ;Increments x counter for bitmap traversal
00000114                           130      
00000114  0698 00000000            131      add.l #0, (A0)+ ;Increments a0 to get to next value
0000011A                           132     
0000011A  BC45                     133      cmp d5,d6
0000011C  6CB6                     134      bge EndianSwap
0000011E                           135      
0000011E                           136      ;To check y, we want to see if its less than the top left corner y
0000011E                           137      
0000011E  2E7C 00FFFFF8            138      move.l #$00FFFFF8,sp
00000124  2017                     139      move.l (sp),d0
00000126  2E7C 00FFFFD8            140      move.l #$00FFFFD8,sp
0000012C                           141      
0000012C  B044                     142      cmp d4,d0 ;Compares current y to highest row, if not equal, repeats EndianSwap. Otherwise returns
0000012E  6DA4                     143      blt EndianSwap
00000130  4E75                     144      rts
00000132                           145      
00000132                           146  ChangeXPlus:
00000132  2017                     147      move.l (sp),d0 ;puts the leftmost x value into d0
00000134  9085                     148      sub.l d5,d0 ;Subtracts current x value from the leftmost x value to get difference between the two, how many spaces a0 needs to increment
00000136                           149      
00000136  5280                     150      add.l #1,d0
00000138  2A17                     151      move.l (sp),d5 ;set d5 to proper leftmost value
0000013A                           152      
0000013A  5285                     153      add.l #1,d5
0000013C  C0FC 0004                154      mulu.w #4,d0 ;Multiplies by bytes per pixel
00000140                           155      
00000140  D1C0                     156      add.l d0, A0 ;Increments the address value to right location
00000142                           157      
00000142  2E7C 00FFFFD8            158      move.l #$00FFFFD8,sp
00000148                           159      
00000148  BABC 00000000            160      cmp.l #0,d5
0000014E  6C84                     161      bge EndianSwap
00000150                           162      
00000150                           163  ChangeXMinus:
00000150                           164     ;Since current x has surpassed the rightmost x value, address should be incremented by the total bitmap width - chunk width 
00000150                           165      
00000150  2E7C 00FFFFE0            166      move.l #$00FFFFE0,sp
00000156                           167      
00000156  2017                     168      move.l (sp),d0 ;Saves bitmap width to d0
00000158                           169      
00000158  2E7C 00FFFFF4            170      move.l #$00FFFFF4,sp
0000015E  9097                     171      sub.l (sp),d0 ;Subtracts chunk width from d0
00000160                           172      
00000160  5384                     173      sub.l #1, d4 ;Decrements y values as well to change to new row logically and in chunk
00000162  5382                     174      sub.l #1,d2
00000164                           175  
00000164  2E7C 00FFFFEC            176      move.l #$00FFFFEC,sp
0000016A                           177      
0000016A  2617                     178      move.l (sp),d3 ;Resets current x values to be leftmost values
0000016C                           179  
0000016C  2E7C 00FFFFFC            180      move.l #$00FFFFFC,sp
00000172                           181      
00000172  2A17                     182      move.l (sp),d5 ;Sets to leftmost x value on output window logically
00000174  5285                     183      add.l #1,d5
00000176                           184      
00000176  2E7C 00FFFFD8            185      move.l #$00FFFFD8,sp
0000017C  C0FC 0004                186      mulu.w #4,d0
00000180                           187      
00000180  D1C0                     188      add.l d0,a0 ;Increments a0 to proper address index
00000182                           189      
00000182  BC85                     190      cmp.l d5,d6
00000184  6E00 FF4E                191      bgt EndianSwap
00000188                           192      
00000188                           193  Exit:
00000188                           194  
00000188                           195  
00000188                           196  
00000188                           197  
00000188                           198  
00000188                           199  
00000188                           200  
00000188                           201  
00000188                           202  
00000188                           203  
00000188                           204  
00000188                           205  
00000188                           206  
00000188                           207  
00000188                           208  
00000188                           209  
Line 210 WARNING: END directive missing, starting address not set

3 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHANGEXMINUS        150
CHANGEXPLUS         132
CREATEPIXELARRAYVALUES  70
ENDIANSWAP          D4
EXIT                188
INITIALY            AA
